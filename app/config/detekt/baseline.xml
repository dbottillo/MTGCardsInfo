<?xml version="1.0" ?>
<SmellBaseline>
  <Blacklist></Blacklist>
  <Whitelist>
    <ID>LongParameterList:DataModule.kt$DataModule$( @Named("storageDB") database: SQLiteDatabase, cardDataSource: CardDataSource, mtgCardDataSource: MTGCardDataSource, deckColorMapper: DeckColorMapper, logger: Logger )</ID>
    <ID>LongParameterList:DataModule.kt$DataModule$( favouritesDataSource: FavouritesDataSource, cardsHelper: CardsHelper, cardsPreferences: CardsPreferences, logger: Logger )</ID>
    <ID>LongParameterList:DataModule.kt$DataModule$( mtgCardDataSource: MTGCardDataSource, favouritesDataSource: FavouritesDataSource, cardsPreferences: CardsPreferences, cardsHelper: CardsHelper, logger: Logger )</ID>
    <ID>LongParameterList:DataModule.kt$DataModule$(fileUtil: FileUtil, deckDataSource: DeckDataSource, generalData: GeneralData, logger: Logger)</ID>
    <ID>LongParameterList:FragmentBuilder.kt$SetsFragmentModule$( setsInteractor: SetsInteractor, cardsInteractor: CardsInteractor, cardsPreferences: CardsPreferences, generalData: GeneralData, logger: Logger )</ID>
    <ID>LongParameterList:InteractorsModule.kt$InteractorsModule$( cardsStorage: CardsStorage, fileManager: FileManager, schedulerProvider: SchedulerProvider, logger: Logger, cardRepository: CardRepository )</ID>
    <ID>LongParameterList:InteractorsModule.kt$InteractorsModule$( decksStorage: DecksStorage, fileManager: FileManager, schedulerProvider: SchedulerProvider, logger: Logger )</ID>
    <ID>LongParameterList:LegacyActivityBuilder.kt$CardsActivityModule$( cardsInteractor: CardsInteractor, savedCardsInteractor: SavedCardsInteractor, decksInteractor: DecksInteractor, cardsPreferences: CardsPreferences, logger: Logger )</ID>
    <ID>LongParameterList:LegacyActivityBuilder.kt$SearchActivityModule$( setsInteratcor: SetsInteractor, cardsInteractor: CardsInteractor, generalData: GeneralData, logger: Logger )</ID>
    <ID>MaxLineLength:AppNavigator.kt$AppNavigator$override fun openCardsLuckyScreen(origin: Activity)</ID>
    <ID>MaxLineLength:AppNavigator.kt$AppNavigator$override fun openReleaseNoteScreen(origin: Activity)</ID>
    <ID>MaxLineLength:AppNavigator.kt$AppNavigator$override fun openSettingsScreen(origin: Activity)</ID>
    <ID>MaxLineLength:AppPreferencesImpl.kt$AppPreferencesImpl$private val sharedPreferences: SharedPreferences by lazy(LazyThreadSafetyMode.NONE) { context.getSharedPreferences(PREFS_NAME, 0) }</ID>
    <ID>MaxLineLength:DataModule.kt$DataModule$@Provides @Singleton fun provideDecksStorage(fileUtil: FileUtil, deckDataSource: DeckDataSource, generalData: GeneralData, logger: Logger): DecksStorage</ID>
    <ID>MaxLineLength:DataModule.kt$DataModule$@Provides @Singleton fun provideFavouritesDataSource(@Named("storageDB") database: SQLiteDatabase, cardDataSource: CardDataSource): FavouritesDataSource</ID>
    <ID>MaxLineLength:LegacyActivityBuilder.kt$CardsActivityModule$return CardsActivityPresenterImpl(cardsInteractor, savedCardsInteractor, decksInteractor, cardsPreferences, logger)</ID>
    <ID>MaxLineLength:LuckyWidgetProvider.kt$LuckyWidgetProvider$val appWidgetIds = intent?.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID)?.let { intArrayOf(it) } ?: manager.getAppWidgetIds(cn)</ID>
    <ID>MaxLineLength:LuckyWidgetProvider.kt$LuckyWidgetProvider$val pendingIntent = PendingIntent.getActivity(context, appWidgetId, openIntent, PendingIntent.FLAG_UPDATE_CURRENT)</ID>
    <ID>MaxLineLength:LuckyWidgetProvider.kt$LuckyWidgetProvider$val refreshPendingIntent = PendingIntent.getBroadcast(context, appWidgetId, refreshIntent, PendingIntent.FLAG_UPDATE_CURRENT)</ID>
    <ID>NewLineAtEndOfFile:ActivityBuilder.kt$com.dbottillo.mtgsearchfree.dagger.ActivityBuilder.kt</ID>
    <ID>NewLineAtEndOfFile:AppComponent.kt$com.dbottillo.mtgsearchfree.dagger.AppComponent.kt</ID>
    <ID>NewLineAtEndOfFile:AppModule.kt$com.dbottillo.mtgsearchfree.dagger.AppModule.kt</ID>
    <ID>NewLineAtEndOfFile:AppNavigator.kt$com.dbottillo.mtgsearchfree.AppNavigator.kt</ID>
    <ID>NewLineAtEndOfFile:AppPreferencesImpl.kt$com.dbottillo.mtgsearchfree.AppPreferencesImpl.kt</ID>
    <ID>NewLineAtEndOfFile:DataModule.kt$com.dbottillo.mtgsearchfree.dagger.DataModule.kt</ID>
    <ID>NewLineAtEndOfFile:FragmentBuilder.kt$com.dbottillo.mtgsearchfree.dagger.FragmentBuilder.kt</ID>
    <ID>NewLineAtEndOfFile:LuckyWidgetProvider.kt$com.dbottillo.mtgsearchfree.widget.LuckyWidgetProvider.kt</ID>
    <ID>NewLineAtEndOfFile:MTGApp.kt$com.dbottillo.mtgsearchfree.MTGApp.kt</ID>
    <ID>TooManyFunctions:AppNavigator.kt$AppNavigator$AppNavigator</ID>
    <ID>TooManyFunctions:DataModule.kt$DataModule$DataModule</ID>
    <ID>TooManyFunctions:TrackingManagerImpl.kt$TrackingManagerImpl$TrackingManagerImpl</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_ADD_CARD = "addCard"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_CLOSE = "close"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_DELETE = "delete"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_EXPORT = "export"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_EXTERNAL_LINK = "externalLink"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_LUCKY = "lucky"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_MOVE_ALL = "moveAll"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_MOVE_ONE = "moveOne"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_ONE_MORE = "oneMore"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_OPEN = "open"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_RATE = "rate"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_REMOVE_ALL = "removeALL"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_REMOVE_ONE = "removeOne"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_SAVE = "saved"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_SELECT = "select"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_SHARE = "share"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_TOGGLE = "toggle"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_ACTION_UNSAVED = "unsaved"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_CATEGORY_APP_WIDGET = "appWidget"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_CATEGORY_CARD = "card"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_CATEGORY_DECK = "deck"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_CATEGORY_ERROR = "error"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_CATEGORY_FAVOURITE = "favourite"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_CATEGORY_FILTER = "filter"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_CATEGORY_LIFE_COUNTER = "lifeCounter"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_CATEGORY_POPUP = "popup"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_CATEGORY_RELEASE_NOTE = "releaseNote"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_CATEGORY_SEARCH = "search"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_CATEGORY_SET = "set"</ID>
    <ID>VariableNaming:TrackingManagerImpl.kt$TrackingManagerImpl$private val UA_CATEGORY_UI = "ui"</ID>
  </Whitelist>
</SmellBaseline>
