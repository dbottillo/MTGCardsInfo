buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "https://maven.google.com" }
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
    }

    dependencies {
        apply from: 'dependencies-versions.gradle'
        apply from: 'dependencies-all.gradle'

        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'com.google.gms:google-services:4.2.0'
        classpath 'io.fabric.tools:gradle:1.26.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.20.0"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.16.0"
    }
}

plugins{
    id "io.gitlab.arturbosch.detekt" version "1.0.0-RC10"
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://maven.google.com" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }

    dependencies { apply from:"$rootProject.rootDir/dependencies-groups.gradle" }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

subprojects {
    apply plugin: 'com.diffplug.gradle.spotless'
    spotless {
        kotlin {
            target 'src/**/*.kt'
            ktlint('0.28.0')
        }
    }

    apply plugin: 'io.gitlab.arturbosch.detekt'
    detekt {
        config = files("$rootDir/config/detekt/config.yml")
        baseline = file("$projectDir/config/detekt/baseline.xml")

        reports {
            html {
                enabled = true
                destination = file("$projectDir/build/detekt.html")
            }
        }
    }

    apply plugin: 'findbugs'
    apply plugin: 'pmd'
    apply plugin: 'checkstyle'
}

apply plugin: 'com.github.ben-manes.versions'
dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'atlassian'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

def checkstyleConfigDir = new File("$rootDir/config/checkstyle")
task checkstyle(type: Checkstyle) {
    configFile = new File(checkstyleConfigDir, "checkstyle.xml")
    configProperties.checkstyleConfigDir = checkstyleConfigDir
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

task findbus(type: FindBugs) {

    description 'Run findbugs'
    group 'verification'

    classes = fileTree('build/intermediates/classes/release')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("./config/findbugs/exclude.xml")

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task pmd(type: Pmd) {

    description 'Run pmd'
    group 'verification'

    ruleSetFiles = files("./config/pmd/pmd-ruleset.xml")
    ruleSets = []
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task quality
quality.dependsOn 'checkstyle', 'pmd', 'detekt'
//quality.dependsOn 'checkstyle', 'lintRelease', 'pmd', 'findbugs'

task testPreRelease
//testPreRelease.dependsOn 'testReleaseUnitTest', 'connectedAndroidTest'
testPreRelease.dependsOn 'testReleaseUnitTest'

task release
release.dependsOn 'assembleRelease', 'quality', 'testPreRelease'

task devTest
//devTest.dependsOn 'testDebugUnitTest', 'connectedAndroidTest'
devTest.dependsOn 'testDebugUnitTest'

apply from: 'githooks.gradle'