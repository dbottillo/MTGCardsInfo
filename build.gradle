buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url "https://maven.google.com" }
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
    }

    dependencies {
        apply from: 'dependencies-versions.gradle'
        apply from: 'dependencies-all.gradle'

        classpath 'com.android.tools.build:gradle:3.6.3'
        classpath 'com.google.gms:google-services:4.3.3'
        classpath 'io.fabric.tools:gradle:1.31.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.28.0"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:4.0.1"
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version "1.9.1"
}

allprojects {
    repositories {
        maven {
            url "https://maven.google.com"
            content {
                includeGroupByRegex "androidx.*"
                includeGroup "android.arch.lifecycle"
                includeGroup "android.arch.core"
                includeGroupByRegex "com.android.*"
                includeGroup "com.google.firebase"
                includeGroup "com.google.android.material"
                includeGroup "com.google.android.gms"
            }
        }
        maven {
            url "https://repo.maven.apache.org/maven2"
            content {
                includeGroupByRegex "org.jetbrains.*"
                includeGroupByRegex "io.reactivex.*"
                includeGroup "org.reactivestreams"
                includeGroup "com.google"
                includeGroup "com.google.code.gson"
                includeGroup "com.google.guava"
                includeGroupByRegex "com.google.truth.*"
                includeGroupByRegex "com.google.auto.*"
                includeGroupByRegex "com.squareup.*"
                includeGroup "org.hamcrest"
                includeGroupByRegex "javax.*"
                includeGroup "org.mockito"
                includeGroup "com.nhaarman"
                includeGroup "com.google.dagger"
                includeGroup "com.google.googlejavaformat"
                includeGroup "com.github.bumptech.glide"
                includeGroup "com.google.protobuf"
                includeGroup "junit"
                includeGroup "org.robolectric"
                includeGroup "org.easytesting"
                includeGroup "net.bytebuddy"
                includeGroup "org.objenesis"
                includeGroup "org.bouncycastle"
                includeGroupByRegex "org.apache.*"
                includeGroup "org.ow2.asm"
                includeGroup "com.almworks.sqlite4java"
                includeGroup "com.ibm.icu"
                includeGroup "com.jakewharton.android.repackaged"
                includeGroup "com.google.android.apps.common.testing.accessibility.framework"
                includeGroup "com.google.code.findbugs"
                includeGroupByRegex "net.sf.*"
                includeGroup "nekohtml"
                includeGroup "backport-util-concurrent"
                includeGroup "org.codehaus.plexus"
                includeGroup "classworlds"
                includeGroup "org.ow2"
                includeGroup "org.sonatype.oss"
                includeGroup "org.jacoco"
                includeGroup "org.checkerframework"
                includeGroup "com.google.errorprone"
                includeGroup "com.google.j2objc"
                includeGroupByRegex "org.codehaus.*"
                includeGroup "org.codehaus.groovy"
                includeGroup "it.unimi.dsi"
                includeGroupByRegex "com.googlecode.*"
                includeGroupByRegex "com.sun.*"
                includeGroupByRegex "org.glassfish.*"
                includeGroup "com.google.jimfs"
                includeGroup "commons-logging"
                includeGroup "commons-codec"
                includeGroup "org.jvnet.staxex"
                includeGroup "org.yaml"
                includeGroupByRegex "net.ltgt.*"
                includeGroupByRegex "net.java.*"
                includeGroup "org.easymock"
                includeGroup "org.smali"
                includeGroup "cglib"
            }
        }
        maven {
            url 'https://maven.fabric.io/public'
            content {
                includeGroupByRegex "com.crashlytics.*"
                includeGroupByRegex "io.fabric.*"
            }
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
            content {
                includeGroup "io.gitlab.arturbosch.detekt"
            }
        }
        jcenter {
            url "https://jcenter.bintray.com"
            content {
                includeGroup "org.jetbrains.trove4j"
                includeGroup "org.jetbrains.kotlinx"
                includeGroup "com.beust"
            }
        }
    }

    dependencies { apply from: "$rootProject.rootDir/dependencies-groups.gradle" }
}

apply plugin: 'com.diffplug.gradle.spotless'
spotless {
    kotlin {
        target 'src/**/*.kt'
    }
}

subprojects {
    apply plugin: 'io.gitlab.arturbosch.detekt'
    detekt {
        config = files("$rootDir/config/detekt/config.yml")
        baseline = file("$projectDir/config/detekt/baseline.xml")

        reports {
            html {
                enabled = true
                destination = file("$projectDir/build/detekt.html")
            }
        }
    }

    apply plugin: 'pmd'
    apply plugin: 'checkstyle'
}

apply plugin: 'com.github.ben-manes.versions'
dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'atlassian'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

def checkstyleConfigDir = new File("$rootDir/config/checkstyle")
task checkstyle(type: Checkstyle) {
    configFile = new File(checkstyleConfigDir, "checkstyle.xml")
    configProperties.checkstyleConfigDir = checkstyleConfigDir
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}


task pmd(type: Pmd) {

    description 'Run pmd'
    group 'verification'

    ruleSetFiles = files("./config/pmd/pmd-ruleset.xml")
    ruleSets = []
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

apply from: 'githooks.gradle'