buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.20.0'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'com.google.gms.google-services'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 39
        versionName "2.7.3"
        applicationId "com.dbottillo.mtgsearchfree"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debugConfig {
            keyAlias 'androiddebugkey'
            storeFile file('../debug.keystore')
            keyPassword 'android'
            storePassword 'android'
        }

        releaseConfig {
            keyAlias 'dbottillo'
            storeFile file('../dbottillo.keystore')
            keyPassword ''
            storePassword ''
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "_dev"
            signingConfig signingConfigs.debugConfig
            debuggable true
            buildConfigField 'int', 'DATABASE_VERSION', '12'
            buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
            buildConfigField 'boolean', 'COPY_DB', 'true'
            lintOptions {
                abortOnError false
            }
        }
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.releaseConfig
            buildConfigField 'int', 'DATABASE_VERSION', '12'
            buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
            buildConfigField 'boolean', 'COPY_DB', 'false'
        }
    }

    lintOptions {
        xmlReport false
        checkAllWarnings true
        lintConfig file("config/lint/lint.xml")
        ignore 'RtlHardcoded', 'RtlEnabled', 'RtlSymmetry', 'SelectableText'
    }
}

task readPasswordFromInput << {
    def console = System.console()
    if (console == null)
        throw new IllegalStateException('no console available, use --no-daemon flag')

    ext.keystorePassword = console.readLine('\n\n\n> Enter keystore password: ')

    android.signingConfigs.releaseConfig.storePassword = ext.keystorePassword
    android.signingConfigs.releaseConfig.keyPassword = ext.keystorePassword
}

/*tasks.whenTaskAdded { task ->
    if (task.NAME == 'assembleHearthstoneRelease' || task.NAME == 'assembleMagicRelease')
        task.dependsOn readPasswordFromInput
}*/

tasks.whenTaskAdded { task ->
    if (task.name == 'validateReleaseConfigSigning') {
        task.dependsOn readPasswordFromInput
    }
}

dependencies {
    compile 'com.android.support:support-v4:23.1.1'
    compile "com.android.support:appcompat-v7:23.1.1"
    compile 'com.google.android.gms:play-services-analytics:8.3.0'
    compile 'com.readystatesoftware.sqliteasset:sqliteassethelper:2.0.1'
    compile 'com.github.castorflex.smoothprogressbar:library:1.1.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.android.support:cardview-v7:23.1.1'
    compile 'com.android.support:recyclerview-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
    compile 'de.greenrobot:eventbus:2.4.1'
    compile 'com.jakewharton:butterknife:7.0.1'

    // Crashlytics Kit
    compile('com.crashlytics.sdk.android:crashlytics:2.4.0@aar') {
        transitive = true
    }

    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'commons-io:commons-io:2.0'
    testCompile 'org.easytesting:fest-assert-core:2.0M10'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'com.android.support:support-annotations:23.1.1'
    testCompile "com.android.support:appcompat-v7:23.1.1"
    testCompile 'com.android.support:recyclerview-v7:23.1.1'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2.1'
    androidTestCompile 'com.android.support:support-annotations:23.1.1'
    androidTestCompile "com.android.support:appcompat-v7:23.1.1"
    androidTestCompile 'com.android.support:recyclerview-v7:23.1.1'
}

task checkstyle(type: Checkstyle) {
    // Where my checkstyle config is...
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/quality/checkstyle/suppressions.xml").absolutePath
    // Where is my suppressions file for checkstyle is...
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

task findbugs(type: FindBugs, dependsOn: assembleDebug) {

    description 'Run findbugs'
    group 'verification'

    classes = fileTree('build/intermediates/classes/debug/')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("./config/findbugs/exclude.xml")

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task pmd(type: Pmd, dependsOn: assembleDebug) {

    description 'Run pmd'
    group 'verification'

    ruleSetFiles = files("./config/pmd/pmd-ruleset.xml")
    ruleSets = []
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

check.dependsOn 'checkstyle', 'findbugs', 'pmd', 'lint'