<?xml version="1.0" ?>
<SmellBaseline>
  <Blacklist timestamp="1532376381009"></Blacklist>
  <Whitelist timestamp="1545156799331">
    <ID>ComplexCondition:CardsHelper.kt$CardsHelper$(it.isCommon &amp;&amp; !filter.common) || (it.isUncommon &amp;&amp; !filter.uncommon) || (it.isRare &amp;&amp; !filter.rare) || (it.isMythicRare &amp;&amp; !filter.mythic)</ID>
    <ID>ComplexCondition:NetworkIntentService.kt$NetworkIntentService$res != null &amp;&amp; (res.lowprice == null || res.lowprice!!.equals("0", ignoreCase = true)) &amp;&amp; setName != null &amp;&amp; setName.isNotEmpty()</ID>
    <ID>ComplexMethod:BaseHomeFragment.kt$BaseHomeFragment$override fun onMenuItemClick(item: MenuItem?): Boolean</ID>
    <ID>ComplexMethod:CardsActivityPresenterImpl.kt$CardsActivityPresenterImpl$override fun init(view: CardsActivityView, intent: Intent?)</ID>
    <ID>ComplexMethod:CardsConfiguratorPresenterImpl.kt$CardsConfiguratorPresenterImpl$override fun update(type: CardFilter.TYPE, on: Boolean)</ID>
    <ID>ComplexMethod:CreateDBAsyncTask.kt$CreateDBAsyncTask.Companion$@Throws(JSONException::class) private fun createContentValueFromJSON(jsonObject: JSONObject, set: MTGSet): ContentValues</ID>
    <ID>ComplexMethod:CreateDBAsyncTask.kt$CreateDBAsyncTask.Companion$fun adjustCode(code: String?): String?</ID>
    <ID>ComplexMethod:DeckFragment.kt$DeckFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:FilterPickerView.kt$FilterPickerView$fun configure(showFilter: Boolean, showOrder: Boolean)</ID>
    <ID>ComplexMethod:FilterPickerView.kt$FilterPickerView$override fun onClick(view: View)</ID>
    <ID>ComplexMethod:MTGCardView.kt$MTGCardView$private fun load(card: MTGCard)</ID>
    <ID>ComplexMethod:NetworkIntentService.kt$NetworkIntentService$@Throws(Exception::class) private fun doNetworkRequest(url: String): TCGPrice</ID>
    <ID>ComplexMethod:SearchActivity.kt$SearchActivity$override fun onClick(v: View)</ID>
    <ID>ComplexMethod:SearchActivity.kt$SearchActivity$override fun onCreate(bundle: Bundle?)</ID>
    <ID>EmptySecondaryConstructor:FilterPickerView.kt$FilterPickerView${}</ID>
    <ID>EmptySecondaryConstructor:MTGCardView.kt$MTGCardView${}</ID>
    <ID>ForbiddenComment:CardMigratorService.kt$CardMigratorService$// TODO: before re-using this class it needs to create a channel</ID>
    <ID>ForbiddenComment:CardsActivityPresenterImpl.kt$CardsActivityPresenterImpl$// TODO: this need testing</ID>
    <ID>ForbiddenComment:CardsLuckyPresenterImpl.kt$CardsLuckyPresenterImpl$// TODO: this need testing</ID>
    <ID>ForbiddenComment:SearchActivity.kt$SearchActivity$// TODO: pre-lollipop version</ID>
    <ID>LargeClass:SearchActivity.kt$SearchActivity : BasicActivityOnClickListenerSearchActivityViewOnCardListener</ID>
    <ID>LongMethod:CreateDBAsyncTask.kt$CreateDBAsyncTask.Companion$@Throws(JSONException::class) private fun createContentValueFromJSON(jsonObject: JSONObject, set: MTGSet): ContentValues</ID>
    <ID>LongMethod:SearchActivity.kt$SearchActivity$override fun onCreate(bundle: Bundle?)</ID>
    <ID>MagicNumber:AboutActivity.kt$AboutActivity$1000</ID>
    <ID>MagicNumber:AboutActivity.kt$AboutActivity$5</ID>
    <ID>MagicNumber:AddFavouritesAsyncTask.kt$AddFavouritesAsyncTask$600</ID>
    <ID>MagicNumber:AddToDeckFragment.kt$AddToDeckFragment$30</ID>
    <ID>MagicNumber:AddToDeckFragment.kt$AddToDeckFragment.&lt;no name provided&gt;$5</ID>
    <ID>MagicNumber:AnimationUtil.kt$AnimationUtil$200</ID>
    <ID>MagicNumber:AnimationUtil.kt$AnimationUtil$250</ID>
    <ID>MagicNumber:BottomTabs.kt$BottomTabs$0.7f</ID>
    <ID>MagicNumber:BottomTabs.kt$BottomTabs$1.2f</ID>
    <ID>MagicNumber:BottomTabs.kt$BottomTabs$3</ID>
    <ID>MagicNumber:CardMigratorService.kt$CardMigratorService$107</ID>
    <ID>MagicNumber:CardViewHolder.kt$ListCardViewHolder$3</ID>
    <ID>MagicNumber:CardViewHolder.kt$ListCardViewHolder$4</ID>
    <ID>MagicNumber:CardsActivity.kt$CardsActivity$0.5</ID>
    <ID>MagicNumber:CardsActivity.kt$CardsActivity$16</ID>
    <ID>MagicNumber:CardsAdapter.kt$CardsAdapter$10</ID>
    <ID>MagicNumber:CardsAdapter.kt$CardsAdapter$14</ID>
    <ID>MagicNumber:CardsAdapter.kt$CardsAdapter$15</ID>
    <ID>MagicNumber:CardsAdapter.kt$CardsAdapter$16</ID>
    <ID>MagicNumber:CardsAdapter.kt$CardsAdapter$17</ID>
    <ID>MagicNumber:CardsAdapter.kt$CardsAdapter$3</ID>
    <ID>MagicNumber:CardsAdapter.kt$CardsAdapter$32f</ID>
    <ID>MagicNumber:CardsAdapter.kt$CardsAdapter$4</ID>
    <ID>MagicNumber:CardsAdapter.kt$CardsAdapter$40f</ID>
    <ID>MagicNumber:CardsAdapter.kt$CardsAdapter$8</ID>
    <ID>MagicNumber:CardsAdapter.kt$CardsAdapter$9</ID>
    <ID>MagicNumber:CreateDBAsyncTask.kt$CreateDBAsyncTask$1024</ID>
    <ID>MagicNumber:CreateDecksAsyncTask.kt$CreateDecksAsyncTask$30</ID>
    <ID>MagicNumber:CreateDecksAsyncTask.kt$CreateDecksAsyncTask$4</ID>
    <ID>MagicNumber:CreateDecksAsyncTask.kt$CreateDecksAsyncTask$98</ID>
    <ID>MagicNumber:DeckAdapter.kt$DeckCardViewHolder$3</ID>
    <ID>MagicNumber:DeckAdapter.kt$DeckCardViewHolder$4</ID>
    <ID>MagicNumber:DeckStartingHandFragment.kt$DeckStartingHandFragment$3</ID>
    <ID>MagicNumber:HomeActivity.kt$HomeActivity$100</ID>
    <ID>MagicNumber:HomeActivity.kt$HomeActivity.&lt;no name provided&gt;$3</ID>
    <ID>MagicNumber:LifeCounterAdapter.kt$LifeCounterAdapter$3</ID>
    <ID>MagicNumber:LifeCounterAdapter.kt$LifeCounterAdapter$5</ID>
    <ID>MagicNumber:LifeCounterFragment.kt$LifeCounterFragment$10</ID>
    <ID>MagicNumber:LifeCounterFragment.kt$LifeCounterFragment$15</ID>
    <ID>MagicNumber:LifeCounterFragment.kt$LifeCounterFragment$20</ID>
    <ID>MagicNumber:LifeCounterFragment.kt$LifeCounterFragment$30</ID>
    <ID>MagicNumber:MTGCardsView.kt$MTGCardsView$6</ID>
    <ID>MagicNumber:MTGCardsView.kt$MTGCardsView$60</ID>
    <ID>MagicNumber:MTGLoader.kt$MTGLoader$3</ID>
    <ID>MagicNumber:MTGLoader.kt$MTGLoader$4</ID>
    <ID>MagicNumber:MTGLoader.kt$MTGLoader$6f</ID>
    <ID>MagicNumber:MTGSearchView.kt$MTGSearchView$2</ID>
    <ID>MagicNumber:NetworkIntentService.kt$NetworkIntentService$200</ID>
    <ID>MagicNumber:NetworkIntentService.kt$NetworkIntentService$500</ID>
    <ID>MagicNumber:SearchActivity.kt$SearchActivity$200</ID>
    <ID>MagicNumber:SearchActivity.kt$SearchActivity$400</ID>
    <ID>MagicNumber:SearchActivity.kt$SearchActivity$6.0f</ID>
    <ID>MagicNumber:SearchActivity.kt$SearchActivity$9</ID>
    <ID>MagicNumber:SearchActivity.kt$SearchActivity$9f</ID>
    <ID>MagicNumber:SearchActivity.kt$SearchActivity.&lt;no name provided&gt;$100</ID>
    <ID>MagicNumber:SetPickerActivity.kt$SetPickerActivity.Divider$16</ID>
    <ID>MagicNumber:StartingHandPresenter.kt$StartingHandPresenter$7</ID>
    <ID>MagicNumber:UIUtil.kt$0.8</ID>
    <ID>MaxLineLength:ActivityBuilder.kt$com.dbottillo.mtgsearchfree.dagger.ActivityBuilder.kt</ID>
    <ID>MaxLineLength:AddToDeckFragment.kt$AddToDeckFragment$val adapter = ArrayAdapter&lt;CharSequence&gt;(activity as FragmentActivity, R.layout.add_to_deck_spinner_item, decksChoose.toTypedArray())</ID>
    <ID>MaxLineLength:AddToDeckFragment.kt$AddToDeckFragment$val adapter = ArrayAdapter&lt;CharSequence&gt;(activity as FragmentActivity, R.layout.add_to_deck_spinner_item, quantityChoose)</ID>
    <ID>MaxLineLength:AddToDeckFragment.kt$AddToDeckFragment.InputFilterMinMax$override fun filter(source: CharSequence, start: Int, end: Int, dest: Spanned, dstart: Int, dend: Int): CharSequence?</ID>
    <ID>MaxLineLength:AddToDeckFragment.kt$com.dbottillo.mtgsearchfree.ui.decks.addToDeck.AddToDeckFragment.kt</ID>
    <ID>MaxLineLength:BaseHomeFragment.kt$com.dbottillo.mtgsearchfree.ui.BaseHomeFragment.kt</ID>
    <ID>MaxLineLength:CardMigratorService.kt$CardMigratorService$val mtgCardDataSource = MTGCardDataSource(MTGDatabaseHelper(applicationContext).readableDatabase, cardDataSource)</ID>
    <ID>MaxLineLength:CardViewHolder.kt$com.dbottillo.mtgsearchfree.ui.cards.CardViewHolder.kt</ID>
    <ID>MaxLineLength:CardsAdapter.kt$CardsAdapter$val v = inflater.inflate(if (configuration.isGrid) R.layout.grid_item_card else R.layout.row_card, parent, false)</ID>
    <ID>MaxLineLength:CardsAdapter.kt$com.dbottillo.mtgsearchfree.ui.cards.CardsAdapter.kt</ID>
    <ID>MaxLineLength:CardsConfiguratorFragment.kt$CardsConfiguratorFragment : BottomSheetDialogFragmentCardsConfiguratorViewOnFilterPickerListener</ID>
    <ID>MaxLineLength:CardsConfiguratorPresenterImpl.kt$CardsConfiguratorPresenterImpl : CardsConfiguratorPresenter</ID>
    <ID>MaxLineLength:CardsPreferencesImpl.kt$CardsPreferencesImpl$private val sharedPreferences: SharedPreferences by lazy(LazyThreadSafetyMode.NONE) { context.getSharedPreferences(PREFS_NAME, 0) }</ID>
    <ID>MaxLineLength:CardsStorageImpl.kt$com.dbottillo.mtgsearchfree.storage.CardsStorageImpl.kt</ID>
    <ID>MaxLineLength:CreateDBAsyncTask.kt$CreateDBAsyncTask : AsyncTask</ID>
    <ID>MaxLineLength:DataModule.kt$DataModule$@Provides @Singleton fun provideDeckDataSource(@Named("storageDB") database: SQLiteDatabase, cardDataSource: CardDataSource, mtgCardDataSource: MTGCardDataSource): DeckDataSource</ID>
    <ID>MaxLineLength:DataModule.kt$DataModule$@Provides @Singleton fun provideDecksStorage(fileUtil: FileUtil, deckDataSource: DeckDataSource, generalData: GeneralData, logger: Logger): DecksStorage</ID>
    <ID>MaxLineLength:DataModule.kt$DataModule$@Provides @Singleton fun provideFavouritesDataSource(@Named("storageDB") database: SQLiteDatabase, cardDataSource: CardDataSource): FavouritesDataSource</ID>
    <ID>MaxLineLength:DeckActivity.kt$DeckActivity$private val tabLayout: TabLayout by lazy(LazyThreadSafetyMode.NONE) { findViewById&lt;TabLayout&gt;(R.id.deck_cards_tab_layout) }</ID>
    <ID>MaxLineLength:DeckActivity.kt$DeckActivity$private val viewPager: ViewPager by lazy(LazyThreadSafetyMode.NONE) { findViewById&lt;ViewPager&gt;(R.id.deck_view_pager) }</ID>
    <ID>MaxLineLength:DeckAdapter.kt$com.dbottillo.mtgsearchfree.ui.decks.deck.DeckAdapter.kt</ID>
    <ID>MaxLineLength:DeckFragment.kt$com.dbottillo.mtgsearchfree.ui.decks.deck.DeckFragment.kt</ID>
    <ID>MaxLineLength:FilterPickerView.kt$FilterPickerView : LinearLayoutOnClickListener</ID>
    <ID>MaxLineLength:FilterPickerView.kt$FilterPickerView$private val filterPanelContainer by lazy(LazyThreadSafetyMode.NONE) { findViewById&lt;View&gt;(R.id.filter_panel_container) }</ID>
    <ID>MaxLineLength:LifeCounterAdapter.kt$LifeCounterAdapter : Adapter</ID>
    <ID>MaxLineLength:LifeCounterAdapter.kt$com.dbottillo.mtgsearchfree.ui.lifecounter.LifeCounterAdapter.kt</ID>
    <ID>MaxLineLength:LuckyWidgetProvider.kt$LuckyWidgetProvider$val appWidgetIds = intent?.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID)?.let { intArrayOf(it) } ?: manager.getAppWidgetIds(cn)</ID>
    <ID>MaxLineLength:LuckyWidgetProvider.kt$LuckyWidgetProvider$val pendingIntent = PendingIntent.getActivity(context, appWidgetId, openIntent, PendingIntent.FLAG_UPDATE_CURRENT)</ID>
    <ID>MaxLineLength:LuckyWidgetProvider.kt$LuckyWidgetProvider$val refreshPendingIntent = PendingIntent.getBroadcast(context, appWidgetId, refreshIntent, PendingIntent.FLAG_UPDATE_CURRENT)</ID>
    <ID>MaxLineLength:MTGCardView.kt$MTGCardView : RelativeLayoutCardView</ID>
    <ID>MaxLineLength:MTGCardView.kt$com.dbottillo.mtgsearchfree.ui.views.MTGCardView.kt</ID>
    <ID>MaxLineLength:MTGCardsView.kt$MTGCardsView$fun loadCards(cards: List&lt;MTGCard&gt;, listener: OnCardListener, title: String, cardFilter: CardFilter?, menuOption: Int)</ID>
    <ID>MaxLineLength:MTGCardsView.kt$com.dbottillo.mtgsearchfree.ui.views.MTGCardsView.kt</ID>
    <ID>MaxLineLength:MTGGAppGlideModule.kt$com.dbottillo.mtgsearchfree.MTGGAppGlideModule.kt</ID>
    <ID>MaxLineLength:MTGSearchView.kt$MTGSearchView : RelativeLayout</ID>
    <ID>MaxLineLength:MTGSearchView.kt$MTGSearchView$private var sets = mutableListOf(MTGSet(-1, "", resources.getString(R.string.search_set_all)), MTGSet(-2, "", resources.getString(R.string.search_set_standard)))</ID>
    <ID>MaxLineLength:MTGSearchView.kt$MTGSearchView$val common: AppCompatCheckBox by lazy(LazyThreadSafetyMode.NONE) { findViewById&lt;AppCompatCheckBox&gt;(R.id.search_common) }</ID>
    <ID>MaxLineLength:MTGSearchView.kt$MTGSearchView$val multiNoOthers: AppCompatCheckBox by lazy(LazyThreadSafetyMode.NONE) { findViewById&lt;AppCompatCheckBox&gt;(R.id.search_mno) }</ID>
    <ID>MaxLineLength:MTGSearchView.kt$MTGSearchView$val mythic: AppCompatCheckBox by lazy(LazyThreadSafetyMode.NONE) { findViewById&lt;AppCompatCheckBox&gt;(R.id.search_mythic) }</ID>
    <ID>MaxLineLength:MTGSearchView.kt$MTGSearchView$val noMulti: AppCompatCheckBox by lazy(LazyThreadSafetyMode.NONE) { findViewById&lt;AppCompatCheckBox&gt;(R.id.search_nm) }</ID>
    <ID>MaxLineLength:MTGSearchView.kt$MTGSearchView$val power: AppCompatEditText by lazy(LazyThreadSafetyMode.NONE) { findViewById&lt;AppCompatEditText&gt;(R.id.search_power) }</ID>
    <ID>MaxLineLength:MTGSearchView.kt$MTGSearchView$val tough: AppCompatEditText by lazy(LazyThreadSafetyMode.NONE) { findViewById&lt;AppCompatEditText&gt;(R.id.search_tough) }</ID>
    <ID>MaxLineLength:MTGSearchView.kt$MTGSearchView$val types: AppCompatEditText by lazy(LazyThreadSafetyMode.NONE) { findViewById&lt;AppCompatEditText&gt;(R.id.search_types) }</ID>
    <ID>MaxLineLength:MTGSearchView.kt$MTGSearchView$val uncommon: AppCompatCheckBox by lazy(LazyThreadSafetyMode.NONE) { findViewById&lt;AppCompatCheckBox&gt;(R.id.search_uncommon) }</ID>
    <ID>MaxLineLength:NetworkIntentService.kt$com.dbottillo.mtgsearchfree.model.network.NetworkIntentService.kt</ID>
    <ID>MaxLineLength:PlayersStorageImpl.kt$PlayersStorageImpl$private val names = arrayOf("Teferi", "Nicol Bolas", "Gerrard", "Ajani", "Jace", "Liliana", "Elspeth", "Tezzeret", "Garruck", "Chandra", "Venser", "Doran", "Sorin")</ID>
    <ID>MaxLineLength:ReleaseNoteActivity.kt$ReleaseNoteActivity$private val releaseNoteList: RecyclerView by lazy(LazyThreadSafetyMode.NONE) { findViewById&lt;RecyclerView&gt;(R.id.release_note_list) }</ID>
    <ID>MaxLineLength:SavedFragment.kt$com.dbottillo.mtgsearchfree.ui.saved.SavedFragment.kt</ID>
    <ID>MaxLineLength:SearchActivity.kt$SearchActivity$val color = argbEvaluator.evaluate(if (amount &lt; 400) amount.toFloat() / 400.toFloat() else 1f, ContextCompat.getColor(this, R.color.color_primary), ContextCompat.getColor(this, R.color.color_primary_slightly_dark)) as Int</ID>
    <ID>MaxLineLength:SearchActivity.kt$SearchActivity$val color = argbEvaluator.evaluate(if (scrollView.scrollY &lt; 400) scrollView.scrollY.toFloat() / 400.toFloat() else 1f, ContextCompat.getColor(this, R.color.color_primary), ContextCompat.getColor(this, R.color.color_primary_slightly_dark)) as Int</ID>
    <ID>MaxLineLength:SearchActivity.kt$com.dbottillo.mtgsearchfree.ui.search.SearchActivity.kt</ID>
    <ID>MaxLineLength:SetsAdapter.kt$com.dbottillo.mtgsearchfree.ui.sets.SetsAdapter.kt</ID>
    <ID>MaxLineLength:SetsFragment.kt$com.dbottillo.mtgsearchfree.ui.sets.SetsFragment.kt</ID>
    <ID>MaxLineLength:ToolbarRevealScrollHelper.kt$com.dbottillo.mtgsearchfree.toolbarereveal.ToolbarRevealScrollHelper.kt</ID>
    <ID>MaxLineLength:UIUtil.kt$com.dbottillo.mtgsearchfree.util.UIUtil.kt</ID>
    <ID>NestedBlockDepth:NetworkIntentService.kt$NetworkIntentService$@Throws(Exception::class) private fun doNetworkRequest(url: String): TCGPrice</ID>
    <ID>ObjectPropertyNaming:AnimationUtil.kt$AnimationUtil$private val DEFAULT_DURATION = 200</ID>
    <ID>ObjectPropertyNaming:AnimationUtil.kt$AnimationUtil$val `val` = valueAnimator.animatedValue as Int</ID>
    <ID>ObjectPropertyNaming:LifeCounterAdapter.kt$LifeCounterAdapter.Companion$private val TYPE_FOOTER: Int = 2</ID>
    <ID>ObjectPropertyNaming:LifeCounterAdapter.kt$LifeCounterAdapter.Companion$private val TYPE_HEADER: Int = 0</ID>
    <ID>ObjectPropertyNaming:LifeCounterAdapter.kt$LifeCounterAdapter.Companion$private val TYPE_PLAYER: Int = 1</ID>
    <ID>PackageNaming:AddToDeckFragment.kt$package com.dbottillo.mtgsearchfree.ui.decks.addToDeck</ID>
    <ID>PackageNaming:AddToDeckPresenter.kt$package com.dbottillo.mtgsearchfree.ui.decks.addToDeck</ID>
    <ID>PackageNaming:AddToDeckPresenterImpl.kt$package com.dbottillo.mtgsearchfree.ui.decks.addToDeck</ID>
    <ID>PackageNaming:AddToDeckView.kt$package com.dbottillo.mtgsearchfree.ui.decks.addToDeck</ID>
    <ID>PackageNaming:CardsConfiguratorFragment.kt$package com.dbottillo.mtgsearchfree.ui.cardsConfigurator</ID>
    <ID>PackageNaming:CardsConfiguratorPresenter.kt$package com.dbottillo.mtgsearchfree.ui.cardsConfigurator</ID>
    <ID>PackageNaming:CardsConfiguratorPresenterImpl.kt$package com.dbottillo.mtgsearchfree.ui.cardsConfigurator</ID>
    <ID>PackageNaming:CardsConfiguratorView.kt$package com.dbottillo.mtgsearchfree.ui.cardsConfigurator</ID>
    <ID>PackageNaming:DeckStartingHandFragment.kt$package com.dbottillo.mtgsearchfree.ui.decks.startingHand</ID>
    <ID>PackageNaming:StartingHandGridAdapter.kt$package com.dbottillo.mtgsearchfree.ui.decks.startingHand</ID>
    <ID>PackageNaming:StartingHandPresenter.kt$package com.dbottillo.mtgsearchfree.ui.decks.startingHand</ID>
    <ID>PackageNaming:StartingHandView.kt$package com.dbottillo.mtgsearchfree.ui.decks.startingHand</ID>
    <ID>ReturnCount:AddToDeckFragment.kt$AddToDeckFragment.InputFilterMinMax$override fun filter(source: CharSequence, start: Int, end: Int, dest: Spanned, dstart: Int, dend: Int): CharSequence?</ID>
    <ID>ReturnCount:CardsAdapter.kt$CardsAdapter$override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder</ID>
    <ID>ReturnCount:DeckActivity.kt$DeckActivity$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>ReturnCount:DecksAdapter.kt$DecksAdapter$override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder</ID>
    <ID>ReturnCount:LifeCounterAdapter.kt$LifeCounterAdapter$override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder</ID>
    <ID>ReturnCount:LifeCounterAdapter.kt$LifeCounterAdapter$private fun getColorOfPosition(context: Context, position: Int): Int</ID>
    <ID>ReturnCount:StartingHandGridAdapter.kt$StartingHandGridAdapter$override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder</ID>
    <ID>TooGenericExceptionCaught:DecksInteractorImpl.kt$DecksInteractorImpl$throwable: Throwable</ID>
    <ID>TooGenericExceptionCaught:DecksStorageImpl.kt$DecksStorageImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MTGGAppGlideModule.kt$MTGGAppGlideModule$e: Exception</ID>
    <ID>TooGenericExceptionCaught:NetworkIntentService.kt$NetworkIntentService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ReleaseNoteStorage.kt$ReleaseNoteStorage$e: Exception</ID>
    <ID>TooGenericExceptionThrown:BaseHomeFragment.kt$BaseHomeFragment$throw RuntimeException("This is a crash")</ID>
    <ID>TooGenericExceptionThrown:MTGGAppGlideModule.kt$MTGGAppGlideModule$throw RuntimeException(e)</ID>
    <ID>TooManyFunctions:AddToDeckFragment.kt$AddToDeckFragment : BasicFragmentAddToDeckView</ID>
    <ID>TooManyFunctions:CardLuckyActivity.kt$CardLuckyActivity : CommonCardsActivityCardsLuckyView</ID>
    <ID>TooManyFunctions:CardsActivity.kt$CardsActivity : CommonCardsActivityOnPageChangeListenerCardsActivityView</ID>
    <ID>TooManyFunctions:CardsInteractor.kt$CardsInteractor</ID>
    <ID>TooManyFunctions:CardsInteractorImpl.kt$CardsInteractorImpl : CardsInteractor</ID>
    <ID>TooManyFunctions:CardsPreferencesImpl.kt$CardsPreferences</ID>
    <ID>TooManyFunctions:CardsPreferencesImpl.kt$CardsPreferencesImpl : CardsPreferences</ID>
    <ID>TooManyFunctions:DataModule.kt$DataModule</ID>
    <ID>TooManyFunctions:DeckActivity.kt$DeckActivity : BasicActivityDeckActivityView</ID>
    <ID>TooManyFunctions:DecksFragment.kt$DecksFragment : BaseHomeFragmentDecksFragmentViewPermissionListener</ID>
    <ID>TooManyFunctions:DecksInteractor.kt$DecksInteractor</ID>
    <ID>TooManyFunctions:DecksInteractorImpl.kt$DecksInteractorImpl : DecksInteractor</ID>
    <ID>TooManyFunctions:DecksStorage.kt$DecksStorage</ID>
    <ID>TooManyFunctions:DecksStorageImpl.kt$DecksStorageImpl : DecksStorage</ID>
    <ID>TooManyFunctions:HomeActivity.kt$HomeActivity : BasicActivity</ID>
    <ID>TooManyFunctions:LifeCounterFragment.kt$LifeCounterFragment : BaseHomeFragmentLifeCounterViewOnLifeCounterListener</ID>
    <ID>TooManyFunctions:MTGCardView.kt$MTGCardView : RelativeLayoutCardView</ID>
    <ID>TooManyFunctions:SavedFragment.kt$SavedFragment : BaseHomeFragmentSavedCardsViewOnCardListener</ID>
    <ID>TooManyFunctions:SearchActivity.kt$SearchActivity : BasicActivityOnClickListenerSearchActivityViewOnCardListener</ID>
    <ID>TooManyFunctions:SetsFragment.kt$SetsFragment : BaseHomeFragmentSetsFragmentViewOnCardListener</ID>
    <ID>TooManyFunctions:ToolbarRevealScrollHelper.kt$ToolbarRevealScrollHelper : OnScrollChangedListener</ID>
    <ID>TooManyFunctions:UIUtil.kt$com.dbottillo.mtgsearchfree.util.UIUtil.kt</ID>
  </Whitelist>
</SmellBaseline>