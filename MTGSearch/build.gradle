buildscript {
    ext.number_of_set = 173
    ext.database_version = 33
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def checkstyleConfigDir = new File(buildscript.sourceFile.parentFile, 'config/checkstyle')
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    keystoreProperties['RELEASE_KEY_PASSWORD'] = ""
    keystoreProperties['RELEASE_STORE_PASSWORD'] = ""
}

androidExtensions {
    experimental = true
}

kapt {
    useBuildCache = true
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId 'com.dbottillo.mtgsearchfree'
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 88
        versionName "3.3.0"
        testInstrumentationRunner "com.dbottillo.mtgsearchfree.TestMTGRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled = false
    }

    signingConfigs {
        debugConfig {
            keyAlias 'androiddebugkey'
            storeFile file('../debug.keystore')
            keyPassword 'android'
            storePassword 'android'
        }

        releaseConfig {
            keyAlias 'dbottillo'
            storeFile file('../dbottillo.keystore')
            keyPassword keystoreProperties['RELEASE_KEY_PASSWORD']
            storePassword keystoreProperties['RELEASE_STORE_PASSWORD']
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "_dev"
            signingConfig signingConfigs.debugConfig
            debuggable true
            testCoverageEnabled true
            buildConfigField 'int', 'NUMBER_OF_SET', "$number_of_set"
            buildConfigField 'int', 'DATABASE_VERSION', "$database_version"
            buildConfigField 'Boolean', 'LOG_THREAD', 'false'
            buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        }
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.releaseConfig
            buildConfigField 'int', 'NUMBER_OF_SET', "$number_of_set"
            buildConfigField 'int', 'DATABASE_VERSION', "$database_version"
            buildConfigField 'Boolean', 'LOG_THREAD', 'false'
            buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        }
    }

    lintOptions {
        xmlReport false
        checkAllWarnings true
        checkReleaseBuilds false
        lintConfig file("config/lint/lint.xml")
        ignore 'RtlHardcoded', 'RtlEnabled', 'RtlSymmetry', 'SelectableText', 'RestrictedApi'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    dexOptions {
        preDexLibraries = false
    }
}

checkstyle {
    toolVersion "7.6.1"
}

dependencies {
    implementation "com.android.support:support-v4:$support_library_version"
    implementation "com.android.support:appcompat-v7:$support_library_version"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"
    implementation "com.android.support:cardview-v7:$support_library_version"
    implementation "com.android.support:recyclerview-v7:$support_library_version"
    implementation "com.android.support:design:$support_library_version"
    implementation "com.android.support.constraint:constraint-layout:$constraint_layout_version"
    implementation "io.reactivex.rxjava2:rxjava:$rx_java_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rx_android_version"
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    compile "com.google.dagger:dagger-android-support:$dagger_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile 'com.google.firebase:firebase-core:11.8.0'
    implementation("com.crashlytics.sdk.android:crashlytics:$crashlytics_version@aar") {
        transitive = true
    }

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_canary_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"

    testImplementation "junit:junit:$junit_version"
    testImplementation "org.hamcrest:hamcrest-library:$hamcrest_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.easytesting:fest-assert-core:$fest_version"
    testCompile "com.nhaarman:mockito-kotlin:1.5.0"

    androidTestImplementation "org.hamcrest:hamcrest-library:$hamcrest_version"
    androidTestImplementation "com.android.support.test:runner:$support_runner_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "com.android.support:support-annotations:$support_library_version"
    androidTestImplementation "com.android.support:appcompat-v7:$support_library_version"
    androidTestImplementation "com.android.support:recyclerview-v7:$support_library_version"
    androidTestImplementation "com.android.support:design:$support_library_version"
    androidTestImplementation 'org.mockito:mockito-android:2.6.3'

}

task checkstyle(type: Checkstyle) {
    configFile = new File(checkstyleConfigDir, "checkstyle.xml")
    configProperties.checkstyleConfigDir = checkstyleConfigDir
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

task findbugs(type: FindBugs) {

    description 'Run findbugs'
    group 'verification'

    classes = fileTree('build/intermediates/classes/release')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("./config/findbugs/exclude.xml")

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task pmd(type: Pmd) {

    description 'Run pmd'
    group 'verification'

    ruleSetFiles = files("./config/pmd/pmd-ruleset.xml")
    ruleSets = []
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task quality
quality.dependsOn 'checkstyle', 'pmd'
//quality.dependsOn 'checkstyle', 'lintRelease', 'pmd', 'findbugs'

task testPreRelease
testPreRelease.dependsOn 'testReleaseUnitTest', 'connectedAndroidTest'

task release
release.dependsOn 'assembleRelease', 'quality', 'testPreRelease'

task devTestAndCoverage(type: JacocoReport) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    jacocoClasspath = configurations['androidJacocoAnt']

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files(["${buildDir}/jacoco/testDevDebugUnitTest.exec",
                           "${buildDir}/outputs/code-coverage/connected/coverage.ec"])
}
devTestAndCoverage.dependsOn 'createDevDebugCoverageReport', 'testDebugUnitTest'

task devTest
devTest.dependsOn 'testDebugUnitTest', 'connectedAndroidTest'

apply plugin: 'com.google.gms.google-services'