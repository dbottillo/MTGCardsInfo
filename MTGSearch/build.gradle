buildscript {
    ext.number_of_set = 182
    ext.database_version = 41
    ext.name_fifth_mtg_card = "Karn Liberated"
}

plugins{
    id "io.gitlab.arturbosch.detekt" version "1.0.0-RC10"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: "com.github.ben-manes.versions"
apply from: '../githooks.gradle'
apply plugin: 'io.gitlab.arturbosch.detekt'

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def checkstyleConfigDir = new File(buildscript.sourceFile.parentFile, 'config/checkstyle')
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    keystoreProperties['RELEASE_KEY_PASSWORD'] = ""
    keystoreProperties['RELEASE_STORE_PASSWORD'] = ""
}

androidExtensions {
    experimental = true
}

kapt {
    useBuildCache = true
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId 'com.dbottillo.mtgsearchfree'
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 100
        versionName "3.5.0"
        testInstrumentationRunner "com.dbottillo.mtgsearchfree.TestMTGRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled = false
    }

    signingConfigs {
        debugConfig {
            keyAlias 'androiddebugkey'
            storeFile file('../debug.keystore')
            keyPassword 'android'
            storePassword 'android'
        }

        releaseConfig {
            keyAlias 'dbottillo'
            storeFile file('../dbottillo.keystore')
            keyPassword keystoreProperties['RELEASE_KEY_PASSWORD']
            storePassword keystoreProperties['RELEASE_STORE_PASSWORD']
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "_dev"
            signingConfig signingConfigs.debugConfig
            debuggable true
            testCoverageEnabled true
            buildConfigField 'int', 'NUMBER_OF_SET', "$number_of_set"
            buildConfigField 'int', 'DATABASE_VERSION', "$database_version"
            buildConfigField 'String', 'MTG_CARD_FIFTH_NAME', "\"${name_fifth_mtg_card}\""
            buildConfigField 'Boolean', 'LOG_THREAD', 'false'
            buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        }
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.releaseConfig
            buildConfigField 'int', 'NUMBER_OF_SET', "$number_of_set"
            buildConfigField 'int', 'DATABASE_VERSION', "$database_version"
            buildConfigField 'String', 'MTG_CARD_FIFTH_NAME', "\"${name_fifth_mtg_card}\""
            buildConfigField 'Boolean', 'LOG_THREAD', 'false'
            buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        }
    }

    lintOptions {
        xmlReport false
        checkAllWarnings true
        checkReleaseBuilds false
        lintConfig file("config/lint/lint.xml")
        ignore 'RtlHardcoded', 'RtlEnabled', 'RtlSymmetry', 'SelectableText', 'RestrictedApi'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        test.resources.srcDirs += ['src/test/resources', 'src/debug/res/raw']
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    dexOptions {
        preDexLibraries = false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

checkstyle {
    toolVersion "7.6.1"
}

dependencies {
    implementation "com.android.support:support-v4:$support_library_version"
    implementation "com.android.support:appcompat-v7:$support_library_version"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"
    implementation "com.android.support:cardview-v7:$support_library_version"
    implementation "com.android.support:recyclerview-v7:$support_library_version"
    implementation "com.android.support:design:$support_library_version"
    implementation "com.android.support.constraint:constraint-layout:$constraint_layout_version"
    implementation "io.reactivex.rxjava2:rxjava:$rx_java_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rx_android_version"
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation 'com.google.firebase:firebase-core:16.0.5'
    implementation("com.crashlytics.sdk.android:crashlytics:$crashlytics_version@aar") {
        transitive = true
    }

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_canary_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"

    testImplementation "junit:junit:$junit_version"
    testImplementation "org.hamcrest:hamcrest-library:$hamcrest_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.easytesting:fest-assert-core:$fest_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "com.nhaarman:mockito-kotlin:1.6.0"

    androidTestImplementation "org.hamcrest:hamcrest-library:$hamcrest_version"
    androidTestImplementation "com.android.support.test:runner:$support_runner_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "com.android.support:support-annotations:$support_library_version"
    androidTestImplementation "com.android.support:appcompat-v7:$support_library_version"
    androidTestImplementation "com.android.support:recyclerview-v7:$support_library_version"
    androidTestImplementation "com.android.support:design:$support_library_version"
    androidTestImplementation 'org.mockito:mockito-android:2.22.0'
}

tasks.withType(Test) {
    jvmArgs '-XX:CompileCommand=exclude,org/robolectric/internal/bytecode/SandboxClassLoader*.*',
            '-XX:CompileCommand=exclude,com/activeandroid/query/From*.*',
            '-XX:CompileCommand=exclude,android/support/v7/app/AppCompatViewInflater*.*'
}

task checkstyle(type: Checkstyle) {
    configFile = new File(checkstyleConfigDir, "checkstyle.xml")
    configProperties.checkstyleConfigDir = checkstyleConfigDir
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

task findbugs(type: FindBugs) {

    description 'Run findbugs'
    group 'verification'

    classes = fileTree('build/intermediates/classes/release')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("./config/findbugs/exclude.xml")

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task pmd(type: Pmd) {

    description 'Run pmd'
    group 'verification'

    ruleSetFiles = files("./config/pmd/pmd-ruleset.xml")
    ruleSets = []
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

apply plugin: 'com.diffplug.gradle.spotless'
spotless {
    kotlin {
        target 'src/**/*.kt'
        ktlint('0.28.0')
    }
}

detekt {
    config = files("$projectDir/config/detekt/config.yml")
    baseline = file("$projectDir/config/detekt/baseline.xml")

    reports {
        html {
            enabled = true
            destination = file("$rootDir/build/detekt.html")
        }
    }
}

task quality
quality.dependsOn 'checkstyle', 'pmd', 'detekt'
//quality.dependsOn 'checkstyle', 'lintRelease', 'pmd', 'findbugs'

task testPreRelease
//testPreRelease.dependsOn 'testReleaseUnitTest', 'connectedAndroidTest'
testPreRelease.dependsOn 'testReleaseUnitTest'

task release
release.dependsOn 'assembleRelease', 'quality', 'testPreRelease'

task devTest
//devTest.dependsOn 'testDebugUnitTest', 'connectedAndroidTest'
devTest.dependsOn 'testDebugUnitTest'

apply plugin: 'com.google.gms.google-services'